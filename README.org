#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: README
#+date: <2022-01-11 Tue>
#+author: Thomas Freeman
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.4.6)
#+cite_export:

* About
This project at the moment is essentially a set of goals at this point rather than a software product.
* Goals
The goals of this project are as follows in order of importance:
1. Provide the following services that can be self-hosted or loaded onto a server of choice:
   - A free/libre student information system (SIS) that could be used on a school system server.
   - A free/libre content management system to send content to students
   - A free/libre assessment creation system
2. Create a system for detailed analysis of student scores
   - This system would use valid statistical methods to analyze data in the most informative manner
   - Ideally, the system would implement machine learning on assessments created in the system to analyze student data in order to weigh questions by difficulty and offer suggestions for student improvement.
* Why?
- These systems are vital to the operations of modern schools and currently there are only propriety/paid services most of these services.
- With closed-source development of these services, it is difficult for community members to create extensions, bug-fixes, and improvements.
- School districts could customize their setup and tailor it to their needs.
- A free/libre system could be expanded upon and used in schools worldwide.
- School systems could self-host the software on their own servers or choose a web service provider of their own choosing.
* Development Plan
** Overview
This section covers an outline of where this project is planned to go and how to go about developing this project.
*** Structure
Here is a diagram of the proposed structure of what I wish to accomplish generally:
#+begin_src plantuml :exports results :file diagram.png
  @startuml
  skinparam defaultTextAlignment center

  actor User
  interface WebUI

  file PDF

  cloud Server {
  component Django
  component "Machine Learning" as ML
  component "Assessment Generator" as AG

  database PostgreSQL{
  collections "Student Information" as SI
  collections "Student Grades" as Grades
  collections "Assessment Scores" as AS
  collections "Question Bank" as Questions
  collections Assessments
  }
  }

  User --> WebUI : User Input
  WebUI <-->> Django : Request
  Django <-->> PostgreSQL : Query
  Django <-->> AG : Request Assessement
  
  
  AS --> Grades : Set Grades
  ML <-[hidden]- Grades : Analyze
  ML <-- AS : Analyze
  ML --> Questions : Set Question Difficulty Factor
  Questions <-->> AG : Query
  AG --> Assessments : Create Scaled Assessment
  AG --> PDF : Export
  Questions --> Assessments : Link

  @enduml
#+end_src

#+RESULTS:
[[file:diagram.png]]
*** Classes/Django Models
The following diagram shows the proposed classes that will be created as Django models that will be used by Django to make database tables in PostgreSQL:
#+begin_src plantuml :exports results :file classes.png
  @startuml

  class GradeBook {
  class_uuid4 : UUIDfield
  class_name : CharField
  students : CharField
  assessments : CharField
  grades : CommaSeparatedIntegerField
  }

  class Grade {
  student_id : UUIDField
  assessment_uuid4 : CharField
  student_score : Positiveintegerfield
  max_score : Positiveintegerfield
  late : BooleanField
  missing : BooleanField
  excused : BooleanField
  incomplete : BooleanField
  }

  class Student {
  student_id : PositiveIntegerField
  first_name : CharField
  last_name : CharField
  age : PositiveIntegerField
  student_email : EmailField
  }

  class Standard {
  id_uudid4 : UUIDField
  name : CharField
  full_text : CharField
  short_text : CharField
  }

  class Assessment {
  id_uuid4 : UUIDField
  qustions : CharField
  max_score : Positiveintegerfield
  due_date : DateTimeField
  publish_date : DateTimeField
  unpublish_date : DateTimeField
  published : BooleanField
  timed_assessment : BooleanField
  time : TimeField
  number_of_attempts : Positiveintegerfield
  password : CharField
  accept_responses : BooleanField
  display_answers_at_end : BooleanField
  display_score_at_end : BooleanField
  }

  class Question {
  id_uuid4 : UUIDField
  max_score : PositiveIntegerfield
  }

  class MultipleChoiceQ {
  text : CharField
  answers : CharField
  }

  class ShortAnswerQ {
  text : CharField
  answers : ChariField
  }

  class DragNDropQ {
  answers : CharField
  }

  class LongAnswerQ {
  text : CharField
  }

  Assessment o-- Question
  Question <|-- ShortAnswerQ
  Question <|-- MultipleChoiceQ
  Question <|-- DragNDropQ
  Question <|-- LongAnswerQ

  GradeBook o-- Grade

  @enduml
#+end_src

#+RESULTS:
[[file:classes.png]]

** Priorities
1. Digital gradebook software
2. Student information system   
3. Digital content server
4. Assessment creator
5. Machine learning
